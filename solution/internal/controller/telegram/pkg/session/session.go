package session

import (
	"fmt"

	e "github.com/nikitaSstepanov/tools/error"
	"gitlab.prodcontest.ru/2025-final-projects-back/nikitaSstepanov/solution/internal/controller/telegram/validator"
	ct "gitlab.prodcontest.ru/2025-final-projects-back/nikitaSstepanov/solution/pkg/utils/controller"
	"gopkg.in/telebot.v4"
)

type Session struct {
	telegram   TelegramUseCase
	advertiser AdvertiserUseCase
}

func New(telegram TelegramUseCase, advertiser AdvertiserUseCase) *Session {
	return &Session{
		telegram:   telegram,
		advertiser: advertiser,
	}
}

func (s *Session) Start(ctx telebot.Context) error {
	c := ct.GetCtxTg(ctx)

	session, err := s.telegram.GetSession(c, uint64(ctx.Sender().ID))
	if err != nil && err.GetCode() != e.NotFound {
		return ctx.Send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à—ë —Ä–∞–∑.")
	}

	if err == nil {
		advertiser, err := s.advertiser.GetById(c, session)
		if err != nil {
			return ctx.Send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à—ë —Ä–∞–∑.")
		}

		return ctx.Send(fmt.Sprintf("–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ %s. –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help", advertiser.Name))
	}

	err = s.telegram.SetState(c, uint64(ctx.Sender().ID), "waiting_id")
	if err != nil {
		return ctx.Send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à—ë —Ä–∞–∑.")
	}

	return ctx.Send("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è.")
}

func (s *Session) WaitingId(ctx telebot.Context) error {
	c := ct.GetCtxTg(ctx)

	id := ctx.Text()

	if err := validator.UUID(id); err != nil {
		return ctx.Send("ID –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç UUID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
	}

	_, err := s.advertiser.GetById(c, id)
	if err != nil {
		return ctx.Send("–†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω üòî")
	}

	err = s.telegram.SetSession(c, uint64(ctx.Sender().ID), id)
	if err != nil {
		return ctx.Send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à—ë —Ä–∞–∑.")
	}

	err = s.telegram.SetState(c, uint64(ctx.Sender().ID), "nothing")
	if err != nil {
		return ctx.Send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à—ë —Ä–∞–∑.")
	}

	return ctx.Send("–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É üòâ –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")
}

func (s *Session) Logout(ctx telebot.Context) error {
	c := ct.GetCtxTg(ctx)

	_, err := s.telegram.GetSession(c, uint64(ctx.Sender().ID))
	if err != nil && err.GetCode() != e.NotFound {
		return ctx.Send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à—ë —Ä–∞–∑.")
	}

	if err != nil {
		return ctx.Send("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
	}

	err = s.telegram.DeleteSession(c, uint64(ctx.Sender().ID))
	if err != nil {
		return ctx.Send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—à—ë —Ä–∞–∑.")
	}

	return ctx.Send("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
}
